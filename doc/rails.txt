ROR - 解决方案
================

   1. Custom SQL with Rails

Listing 12. Custom SQL with ActiveRecord example
sql = "SELECT profession,
              AVG(age) as average_age,  
              AVG(accident_count) 
         FROM persons 
        GROUP 
           BY profession"

Person.find_by_sql(sql).each do |row|   
  puts "#{row.profession}, " <<
       "avg. age: #{row.average_age}, " <<
       "avg. accidents: #{row.average_accident_count}"
end

This script would produce results like Listing 13.
Listing 13. Custom SQL with ActiveRecord output

  Programmer, avg. age: 18.010, avg. accidents: 9
  System Administrator, avg. age: 22.720, avg. accidents: 8

Of course, that's a simple case. You can imagine,
though, how you can extend this example to SQL statements of any complexity. 
You can also run other types of SQL statements, such as ALTER TABLE statements, 
using the ActiveRecord::Base.connection.execute method, as shown in Listing 14.
Listing 14. Custom non-finder SQL with ActiveRecord
  ActiveRecord::Base.connection.execute "ALTER TABLE some_table CHANGE COLUMN..."

Most schema manipulations, such as adding and removing columns,
can be done using Rails's built-in methods. 
But the ability to execute arbitrary SQL code is available if you need it. 


   2. database store produce


   3. cron job


   4. ruby on rails 连接多个数据库

首先在database.yml中加入以下代码，其中cg_clone是外部等待使用的数据库。
cg_clone:
adapter: mysql
database: cg_clone
username: root
password: 
host: localhost 

假如在cg_clone中有一张表叫contracts，那么生成Contract类。并用establish_connection来声明建立到哪个数据库的连接：

class Contract < ActiveRecord::Base
establish_connection :cg_clone
end

这样我们在控制器中就可以使用Contract类了，如：

def contract_list
   @contracts=Contract.find_all
end


   5. Showing SQL statements in the Rails console

2009年1月19日 by Wincent Colaiuta

Found in a comment on this weblog post; stick this in your ~/.irbrc:

if ENV['RAILS_ENV']
  # Called after the irb session is initialized and Rails has been loaded
  IRB.conf[:IRB_RC] = Proc.new do
    logger = Logger.new(STDOUT)
    ActiveRecord::Base.logger = logger
    ActiveResource::Base.logger = logger
  end
end

Now when you interact with the database you'll see it interspersed, colorized with the other output:

$ script/console
Loading development environment (Rails 2.2.2)
>> Issue.first
  Issue Load (0.7ms)   SELECT * FROM `issues` LIMIT 1
=> #<Issue id: 1, created_at: "2009-01-17 21:26:42", updated_at: "2009-01-18 00:00:57">


   6. Add rails log to console

      google: rails logger console

In order to show rails log in console, add theses lines to your .irbrc

if ENV.include?('RAILS_ENV')&& !Object.const_defined?('RAILS_DEFAULT_LOGGER')
  Object.const_set('RAILS_DEFAULT_LOGGER', Logger.new(SDTOUT))
end


   7. debug

   http://guides.rubyonrails.org/debugging_rails_applications.html



   --END